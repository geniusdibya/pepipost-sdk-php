<?php
/*
 * PepipostAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace PepipostAPILib\Controllers;

use PepipostAPILib\APIException;
use PepipostAPILib\APIHelper;
use PepipostAPILib\Configuration;
use PepipostAPILib\Models;
use PepipostAPILib\Exceptions;
use PepipostAPILib\Http\HttpRequest;
use PepipostAPILib\Http\HttpResponse;
use PepipostAPILib\Http\HttpMethod;
use PepipostAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class EmailController extends BaseController
{
    /**
     * @var EmailController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return EmailController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * This Endpoint sends emails with the credentials passed.
     *
     * @param string           $apiKey  (optional) Generated header parameter. Example value
     *                                  ='5ce7096ed4bf2b39dfa932ff5fa84ed9ed8'
     * @param Models\EmailBody $body    (optional) The body passed will be json format.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSendEmail(
        $apiKey = null,
        $body = null
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v2/sendEmail';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'api_key'         => $apiKey
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 405) {
            throw new APIException('Method not allowed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'PepipostAPILib\\Models\\SendEmailResponse');
    }
}
